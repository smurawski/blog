<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripts on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</title>
    <link>https://stevenmurawski.com/categories/scripts/</link>
    <description>Recent content in Scripts on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Aug 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://stevenmurawski.com/categories/scripts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating an Assisted Module with CommandAssist</title>
      <link>https://stevenmurawski.com/2011/08/01/creating-an-assisted-module-with-commandassist/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/08/01/creating-an-assisted-module-with-commandassist/</guid>
      <description>The CommandAssist module allows you to easily create proxies functions for every command in a module (or snapin).&amp;#160;&amp;#160;
There is a handy command to generate these proxy modules included with the CommandAssist module.&amp;#160;

Building an Assisted Module The easiest way to explain what happens is to walk through the usage of New-AssistedModule.&amp;#160; To that end, we&amp;rsquo;ll create a proxy of a module that I&amp;rsquo;ve been use regularly - the ActiveDirectory module.</description>
    </item>
    
    <item>
      <title>Using -Assist in an Assisted Module - CommandAssist</title>
      <link>https://stevenmurawski.com/2011/08/01/using-assist-in-an-assisted-module-commandassist/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/08/01/using-assist-in-an-assisted-module-commandassist/</guid>
      <description>This is the the meat of CommandAssist module, providing a contextual assistant to supplying the right parameters to a command.
Getting to the Meat of It In the last post, we created a proxy module for ActiveDirectory module, so what does that really get for us?
Starting off in a new shell, I&amp;rsquo;ve imported the AssistedAD module and I&amp;rsquo;m going to try out the -Assist parameter for Get-ADUser
Import-Module ADAssistGet-ADUser -Assist</description>
    </item>
    
    <item>
      <title>Setting Application Compatibility Flags</title>
      <link>https://stevenmurawski.com/2011/02/01/setting-application-compatibility-flags/</link>
      <pubDate>Tue, 01 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/02/01/setting-application-compatibility-flags/</guid>
      <description>There was a post on the PowerShell Facebook group today asking how to set the “Run As Administrator” checkbox on the Compatibility tab of the properties for an application.
The compatibility settings are just registry entries, either under the user’s account or under the local machine.
(You can find them under HKCU:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers or
HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers)
Compatibility settings reference the path of the executable as the value and store the app compat flags in the data for the registry key.</description>
    </item>
    
    <item>
      <title>Lake County .NET Users Group–Slide Deck and Samples</title>
      <link>https://stevenmurawski.com/2010/11/01/lake-county-net-users-groupslide-deck-and-samples/</link>
      <pubDate>Mon, 01 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2010/11/01/lake-county-net-users-groupslide-deck-and-samples/</guid>
      <description>Scott Seely and Tim Stall invited me to give an introduction to PowerShell talk for the Lake County .NET Users Group yesterday evening.
We had a great turnout and a number of good questions.&amp;#160; Thank you to everyone who gave up part of their evening to come and learn a bit about the .NET command shell goodness that is PowerShell.&amp;#160;
I’ve uploaded the slide deck, sample scripts, and sample Visual Studio solution here.</description>
    </item>
    
    <item>
      <title>So Easy, I Could Kick Myself</title>
      <link>https://stevenmurawski.com/2009/11/01/so-easy-i-could-kick-myself/</link>
      <pubDate>Sun, 01 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/11/01/so-easy-i-could-kick-myself/</guid>
      <description>I’m updating Crystal Reports and trying to determine which reports might have been affected by some schema changes or functional changes in how the data was being stored. The problem I’ve had is that when there are a large number of reports, it is very time consuming to open each one, look at it, and see if it contains any affected tables or views.
I’ve had to deal with this in my previous role as well.</description>
    </item>
    
    <item>
      <title>Using the Sync Framework from PowerShell</title>
      <link>https://stevenmurawski.com/2009/11/01/using-the-sync-framework-from-powershell/</link>
      <pubDate>Sun, 01 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/11/01/using-the-sync-framework-from-powershell/</guid>
      <description>I’ve been exploring the Sync Framework for use in a couple of projects I have going and PowerShell is my preferred exploratory environment.
It was a bit of fun, since I got to work with eventing for the first time in V2.
First, I downloaded the Sync Framework Software Development Kit. That provided me with the Sync Framework runtime as well as some documentation.
The easiest way for me to get started was to take one of the samples and convert that to PowerShell.</description>
    </item>
    
    <item>
      <title>Turn Your Stored Procedures Into PowerShell Functions - MetaProgramming With PowerShell</title>
      <link>https://stevenmurawski.com/2009/04/01/turn-your-stored-procedures-into-powershell-functions-metaprogramming-with-powershell/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/04/01/turn-your-stored-procedures-into-powershell-functions-metaprogramming-with-powershell/</guid>
      <description>UPDATE: The script was moved to Google Code. The links in the post have been updated to reflect that. Or you can just go here&amp;hellip; http://code.google.com/p/poshcodegen/ I’ve been working on some data conversion at work, converting records from one system to a new system. I’ve built quite a library of SQL queries with PowerShell wrappers for dealing with data in the first system, but I don’t have the same luxury with the new system.</description>
    </item>
    
    <item>
      <title>“Diff”ing Database Table Columns</title>
      <link>https://stevenmurawski.com/2009/03/01/diffing-database-table-columns/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/diffing-database-table-columns/</guid>
      <description>Previously, I published a script on comparing what tables two databases contained.&amp;#160; Going a bit further, I put together a script that compares the columns and what type of data they store.
Compare-DatabaseColumns has similar parameters to the Compare-DatabaseSchema script.
 Table – One or more tables to compare columns from SqlServerOne – SQL Server for the first database FirstDatabase – Name of the first database for the comparison SqlUsernameOne – SQL user name for the first database SqlPasswordOne – SQL password for the first database SqlServerTwo – SQL Server for the second database SecondDatabase – Name of the second database for comparison SqlUsernameTwo – SQL user name for the second database SqlPasswordTwo – SQL password for the second database FilePrefix – Prefix for the log file name Log – Switch parameter that saves one CSV file with the difference in the tables.</description>
    </item>
    
    <item>
      <title>Adding Custom Properties to Functions</title>
      <link>https://stevenmurawski.com/2009/02/01/adding-custom-properties-to-functions/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/adding-custom-properties-to-functions/</guid>
      <description>A question was asked on StackOverflow regarding how to add properties to a function, and then be able to retain that custom property when recalling that function from the function Provider.&amp;#160;&amp;#160; I’m not going to copy my answer here, but I do want to throw out a possible work around for this issue.&amp;#160;
(It has been bugging me and I can’t really concentrate on my other tasks, so I need to get this out of the way.</description>
    </item>
    
    <item>
      <title>Comparing Database Schemas</title>
      <link>https://stevenmurawski.com/2009/02/01/comparing-database-schemas/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/comparing-database-schemas/</guid>
      <description>I regularly am working with several versions of a database for an application that I manage (a live database, training database, test database, and previous version database).&amp;#160; Occasionally, I need to know what the differences between the databases are, especially after our vendor updates my test environment or right after an update in my training or live environment.&amp;#160;
Since I spend a good portion of my day in PowerShell, I wrapped some system table queries in a PowerShell script and use Compare-Object to find any differences in the tables and compare the column definitions as well.</description>
    </item>
    
    <item>
      <title>ConvertTo-Function</title>
      <link>https://stevenmurawski.com/2009/02/01/convertto-function/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/convertto-function/</guid>
      <description>EDIT : I have a bunch of scripts that I use regularly, but it can be a pain to type the path. These are scripts I don&amp;rsquo;t always need, so I don&amp;rsquo;t want to include them in my profile.
I thought it might be convenient to have a way to convert those scripts into functions on demand. I searched around but couldn’t find an existing script to do that, so here one is.</description>
    </item>
    
    <item>
      <title>Finding the K Most Common Words in a File</title>
      <link>https://stevenmurawski.com/2009/02/01/finding-the-k-most-common-words-in-a-file/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/finding-the-k-most-common-words-in-a-file/</guid>
      <description>Doug Finke recently posted a blog post about finding the most common words in a file.
Doug put together a little 19 line PowerShell script to solve the issue, but something just called to me about how it wasn’t necessarily playing to some of the included cmdlets in PowerShell.
So, here’s my interpretation as a one liner:
get-content big.txt | foreach-object {[regex]::split($.ToLower(), &amp;lsquo;\W+&amp;lsquo;)} | where-object {$.length -gt 0} | group-object | sort-object -property count -descending | select-object -property name -first 6</description>
    </item>
    
  </channel>
</rss>