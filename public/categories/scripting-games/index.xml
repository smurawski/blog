<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting Games on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</title>
    <link>https://stevenmurawski.com/categories/scripting-games/</link>
    <description>Recent content in Scripting Games on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Apr 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://stevenmurawski.com/categories/scripting-games/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Games Are Afoot!</title>
      <link>https://stevenmurawski.com/2012/04/01/the-games-are-afoot/</link>
      <pubDate>Sun, 01 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2012/04/01/the-games-are-afoot/</guid>
      <description>The Scripting Games that is! This year’s games are in progress, but it’s not too late to start.&amp;#160; Each weekday a new event is posted, but you have a week to turn in your solution, so get out there and start writing some PowerShell.
All the details you need are available from the Scripting Games All In One Links Page, where the Scripting Guy Ed Wilson has thoughtfully provided (and updates daily) links to the events, rules, and other great information.</description>
    </item>
    
    <item>
      <title>Back to Basics - Variable Names</title>
      <link>https://stevenmurawski.com/2011/05/01/back-to-basics-variable-names/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/back-to-basics-variable-names/</guid>
      <description>$x and $z and $foo just aren&amp;rsquo;t going to cut it in your production scripts.&amp;#160;
Andy Schneider tweeted during the Scripting Games that there was no penalty for providing a descriptive variable name.&amp;#160; He was right and not quite right enough.&amp;#160; Twitter does not provide you the opportunity to share more than a sound bite in one tweet, so he really could not have commented much further there, but he did in a post that expanded on what judges were looking for in style for the Scripting Games.</description>
    </item>
    
    <item>
      <title>Parameter Validation</title>
      <link>https://stevenmurawski.com/2011/05/01/parameter-validation/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/parameter-validation/</guid>
      <description>Glenn Sizemore wrote a great Scripting Games wrap up post about some of the parameter validation options that are available.&amp;#160; Go read it, I&amp;rsquo;ll wait.
The Smackdown - Ensuring You Have A Value Very often you need to make sure that a parameter will not have a null value.&amp;#160; There are a couple of options in making sure you have valid content.
ValidateNotNull vs. ValidateNotNullOrEmpty When you start to look at some of the validation parameters (in about_Advanced_Functions), the two that leap out are the ValidateNotNull and ValidateNotNullOrEmpty.</description>
    </item>
    
    <item>
      <title>Working the Pipeline</title>
      <link>https://stevenmurawski.com/2011/05/01/working-the-pipeline/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/working-the-pipeline/</guid>
      <description>The pipeline is a central concept in PowerShell.&amp;#160; It enables you to chain the output from one command to the input of the next, making automation much smoother.&amp;#160; Making your scripts and functions play nicely with the pipeline can mean really impact the ease of use and adaptability of your functions.
Finding the Value In scripts and advanced functions, declaring a parameter whose value can come from the pipeline is pretty straightforward.</description>
    </item>
    
    <item>
      <title>Back to Basics–Parameters</title>
      <link>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</guid>
      <description>My previous posts about the Scripting Games had many references to how parameters were used in scripts and functions.&amp;#160; Since those posts, I’ve had several requests to expand on that, so here we go…
In the Beginning… In PowerShell V1, when we wrote scripts or functions, we had two main ways to retrieve parameters.
The Dark Ages First off, we could parse $Args.
function Do-Something () { $FirstArgument = $args[0] $SecondArgument = $args[1]</description>
    </item>
    
    <item>
      <title>Better Living Through Splatting</title>
      <link>https://stevenmurawski.com/2011/04/01/better-living-through-splatting/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/better-living-through-splatting/</guid>
      <description>One pattern I&amp;rsquo;ve noticed, especially when dealing with commands that may or may not be executed locally is where a script offers a parameter for the computer name (or a list of computer names).
What Are People Doing? Sometimes, that parameter will be defaulted to $env:ComputerName
[Parameter(Mandatory=$false, Position=1, ValueFromPipeline=$true)][string] $ComputerName = $env:ComputerName
Other times, there will be an if statement checking to see if the parameter is null and assigning $env:ComputerName if it has no other value.</description>
    </item>
    
    <item>
      <title>Caught in a Trap - Dealing with Errors</title>
      <link>https://stevenmurawski.com/2011/04/01/caught-in-a-trap-dealing-with-errors/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/caught-in-a-trap-dealing-with-errors/</guid>
      <description>Errors occur.&amp;#160; Things fail.&amp;#160; As an author of a script, you need to be able to deal with these hiccups.
What Do I Need To Watch For? PowerShell has different types of errors (I explain some of that here.)&amp;#160; Terminating errors can ruin a script&amp;rsquo;s day.&amp;#160; Say you are trying to gather information or update settings to a large number of servers.&amp;#160; What happens when you hit an error on server number three, or number 33, or number 333?</description>
    </item>
    
    <item>
      <title>Checking Out The Environment</title>
      <link>https://stevenmurawski.com/2011/04/01/checking-out-the-environment/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/checking-out-the-environment/</guid>
      <description>If you&amp;rsquo;ve worked with cmd.exe or other shell environments, you might be familiar with environmental variables.
PowerShell exposes these variables in two different ways. (Actually it&amp;rsquo;s the same way, but don&amp;rsquo;t tell anyone..)
So, Spit It Out Already.. First, I can access environmental variables through the provider.
dir env:&amp;lt;/pre&amp;gt;
All my standard commands in navigating and retrieving items from a provider (Get-Item, Set-Item, New-Item, etc..) work in interacting with these variables.</description>
    </item>
    
    <item>
      <title>Clean Up Your Parameters</title>
      <link>https://stevenmurawski.com/2011/04/01/clean-up-your-parameters/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/clean-up-your-parameters/</guid>
      <description>Another tidbit to come from the scripts I&amp;rsquo;ve been reviewing is how messy commands with tons of parameters can be.&amp;#160; You end up with really long lines, uneven lines, and/or lots of backticks.
But What Can We Do? But there are commands that require many parameters or long parameters.&amp;#160; We can only stuff so much in variables, and if we name them clearly, they tend to be longer too.&amp;#160; So how can we deal with this?</description>
    </item>
    
    <item>
      <title>Convert Your Comments to Help</title>
      <link>https://stevenmurawski.com/2011/04/01/convert-your-comments-to-help/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/convert-your-comments-to-help/</guid>
      <description>Version 2 of PowerShell introduced structured help in their work, without having to write MAML help files.
Why Not Write My Own Help Function? One of the things I saw a good bit of in the Scripting Games this year was that people wrote their own help functions.&amp;#160;
The usual pattern included if the script was run with a particular switch or no switch, like My-Script.ps1 –help, a little help text would be spewed out.</description>
    </item>
    
    <item>
      <title>Get in the Games!</title>
      <link>https://stevenmurawski.com/2011/04/01/get-in-the-games/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/get-in-the-games/</guid>
      <description>This year’s Scripting Games is well underway, but there is still time to get involved.
You can submit entries for 7 days after an event was released, so there is still time to participate.&amp;#160;
Definitely Fun, Not all Games… If you think that the games are just that, think again.&amp;#160; If you are just getting in to PowerShell, the events cover many practical applications.
Beginner Event 1 Identifying Private Builds – Stresses finding information about running processes or executables.</description>
    </item>
    
    <item>
      <title>Looking for Help?</title>
      <link>https://stevenmurawski.com/2011/04/01/looking-for-help/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/looking-for-help/</guid>
      <description>PowerShell contains a vast array of content in it&amp;rsquo;s help files.&amp;#160; The help files are exposed by the Get-Help cmdlet.&amp;#160; So, what&amp;rsquo;s really under the covers in the help system?
Finding Help by Keyword PowerShell has a growing surface of things that it can cover.&amp;#160; WMI, COM, .NET, Exchange, Active Directory, SharePoint, and on and on.&amp;#160; How are we ever supposed to find the commands and information we need to use PowerShell effectively.</description>
    </item>
    
    <item>
      <title>Output Options–Use Objects!</title>
      <link>https://stevenmurawski.com/2011/04/01/output-optionsuse-objects/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/output-optionsuse-objects/</guid>
      <description>One area that many people get hung up on in creating a PowerShell script is in the output area. (I’ve been guilty of this too, but I’m trying..)
One Tool to Rule Them All PowerShell embraces the &amp;ldquo;many small tools composed together to create solutions” style of automation, rather than the monolithic “one tool to rule them all (and the command line switches to prove it..)”
What this means is that your script does not have to contain every single export option imagined.</description>
    </item>
    
    <item>
      <title>The Myth of Advanced Functions–CmdletBinding for the Rest of our Scripts</title>
      <link>https://stevenmurawski.com/2011/04/01/the-myth-of-advanced-functionscmdletbinding-for-the-rest-of-our-scripts/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/the-myth-of-advanced-functionscmdletbinding-for-the-rest-of-our-scripts/</guid>
      <description>It’s been killing me to see scripts that are written like V1 functions and having these wonderfully written V2 style advanced functions contained inside of them.
I would like to share a secret about the CmdletBinding, Parameter attribution, and the rest of the capabilities of Advanced Functions.
These features are not just for Functions!
Those Things That Keep Us Apart, Bring Us Together There are a couple of key differences between functions and scripts.</description>
    </item>
    
    <item>
      <title>Using Pipeline Input</title>
      <link>https://stevenmurawski.com/2011/04/01/using-pipeline-input/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/using-pipeline-input/</guid>
      <description>In judging the Scripting Games, I&amp;rsquo;ve found a good number of scripts that are trying to use the Parameter attribute to take pipeline input, but there are several key mistakes.
Why Doesn&amp;rsquo;t This Work? The Problem When you specify a parameter as taking a value from the pipeline, that parameter name is the variable name that you refer to below.&amp;#160;
function Write-SampleData (){ param( [Parameter(ValueFromPipeline=$true,Position=0)] [string] $SampleData )
Write-Host $SampleData  } &amp;lsquo;TestData&amp;rsquo;, &amp;lsquo;TestData2&amp;rsquo;, &amp;lsquo;TestData3&amp;rsquo; | Write-SampleData</description>
    </item>
    
    <item>
      <title>Where to Filter</title>
      <link>https://stevenmurawski.com/2011/04/01/where-to-filter/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/where-to-filter/</guid>
      <description>Where-Object Rocks! PowerShell has some great filtering capabilities.&amp;#160; Where-Object is extremely versatile, allowing you to filter on any logic you can come up with.
I Feel a &amp;quot;But&amp;quot; Coming Up However, many cmdlets, functions, or scripts have some built in filtering capabilities.&amp;#160; These are often optimized for the command, and if the command supports remote connections, often the filtering can happen on the remote host.&amp;#160; Where-Object is the least common denominator in filtering.</description>
    </item>
    
    <item>
      <title>Write-Host Does Just (and Only) That</title>
      <link>https://stevenmurawski.com/2011/04/01/write-host-does-just-and-only-that/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/write-host-does-just-and-only-that/</guid>
      <description>I&amp;rsquo;ve seen a number of scripts that are using Write-Host to display output from their scripts.
For example:
Write-Host &amp;quot;SomeValue = $MyValue&amp;quot;
## So What? I&#39;ll tell you what.. If I want to do anything with that output other than look at it in the console (or perhaps a shell transcript), it gets me nothing.&amp;amp;#160; [I&#39;m not going to rehash why our scripts should return objects rather than text, as I covered that in a previous post](/blog/2011/04/output-optionsuse-objects).</description>
    </item>
    
    <item>
      <title>Time to Start Ramping Up for the Scripting Games</title>
      <link>https://stevenmurawski.com/2011/03/01/time-to-start-ramping-up-for-the-scripting-games/</link>
      <pubDate>Tue, 01 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/03/01/time-to-start-ramping-up-for-the-scripting-games/</guid>
      <description>The 2011 Scripting Games are fast approaching (April 4th through the 15th)..
If you’ve been holding off on learning a bit a PowerShell, now is the time to step up and try some of these events.&amp;#160; Ed Wilson put together a study guide to help prepare you for some of the skills and techniques you will exercise.
If you have participated before, this year promises to be as fun and exciting, if not more so.</description>
    </item>
    
  </channel>
</rss>