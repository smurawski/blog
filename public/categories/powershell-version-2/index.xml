<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell Version 2 on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</title>
    <link>https://stevenmurawski.com/categories/powershell-version-2/</link>
    <description>Recent content in Powershell Version 2 on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Jan 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://stevenmurawski.com/categories/powershell-version-2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>When Import-Module Does Not</title>
      <link>https://stevenmurawski.com/2012/01/01/when-import-module-does-not/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2012/01/01/when-import-module-does-not/</guid>
      <description>A question came up about the behavior of what’s that?).
So What’s the Question? Does the auto-loading of modules in PowerShell Version 3 use Import-Module behind the scenes?&amp;#160; If it does, can we use default parameter sets to control what types of things are imported?
What Actually Happens? So, it turns out that default parameter set (new feature) can be used to customize the import of new modules.
$PSDefaultParameterValues = @{ &amp;quot;Import-Module:Alias&amp;quot;=@() &amp;quot;Import-Module:Function&amp;quot;=&amp;rsquo;&amp;lsquo; &amp;quot;Import-Module:Cmdlet&amp;quot;=&amp;rsquo;&amp;lsquo; &amp;quot;Import-Module:Variable&amp;quot;=&amp;rsquo;*&amp;rsquo; } Get-Module Get-BitsTransfer Get-Module</description>
    </item>
    
    <item>
      <title>Checking Your Pipes For Leaks</title>
      <link>https://stevenmurawski.com/2011/09/01/checking-your-pipes-for-leaks/</link>
      <pubDate>Thu, 01 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/09/01/checking-your-pipes-for-leaks/</guid>
      <description>(NOTE: I started this post a few weeks ago)
This morning I woke up with my kitchen floor covered in water.&amp;#160; As I was cleaning it up, I couldn&amp;rsquo;t help drawing some parallels between fixing a leaky pipe and a &amp;quot;leaky&amp;quot; (non-performing) script.
My repair process this morning took the following steps:
 Contain the leak Locate the source of the leak Stop the leak Check for related damage Mitigate the related damage Patch the leak&amp;#160; Confirm the leak is fixed Monitor the leak site  Since most of you won&amp;rsquo;t really care about the plumbing in my kitchen, let&amp;rsquo;s run through how dealing with this problem applies to troubleshooting a misbehaving script (or function).</description>
    </item>
    
    <item>
      <title>Resources for the WI .NET User Group</title>
      <link>https://stevenmurawski.com/2011/09/01/resources-for-the-wi-net-user-group/</link>
      <pubDate>Thu, 01 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/09/01/resources-for-the-wi-net-user-group/</guid>
      <description>I&amp;rsquo;ll get the slides posted sometime (in the middle of migrating my machine to the developer preview of Win 8), but the links I mentioned are:
—Project Home - http://www.show-ui.com
—CodeplexSite - http://showui.codeplex.com
—Doug Finke’s Blog - http://dougfinke.com/blog
—Joel “Jaykul” Bennet’sBlog - http://huddledmasses.org
—James Brundage’sBlog - http://blog.start-automating.com/</description>
    </item>
    
    <item>
      <title>Waiter, There&#39;s a Bug in My Get-Help!</title>
      <link>https://stevenmurawski.com/2011/08/01/waiter-theres-a-bug-in-my-get-help/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/08/01/waiter-theres-a-bug-in-my-get-help/</guid>
      <description>My friend Robert Robelo was kind enough to point out a problem with the proxies created by the CommandAssist module.
In trying to research the problem, I found that PowerShell crashed ( yes, crashed.. not throwing an error, but CRASHED) when Get-Help could not resolve the command it needed to provide help for.
Setting the Stage Reproducing the Problem Create a module that exports a function
$Path = &#39;c:\users\smurawski\documents\windowspowershell\TestModule.psm1&#39; $null = new-item $Path -ItemType File -Force -Value @&#39; function Test-One { [CmdletBinding()] param($x) $x } Export-ModuleMember -Function Test-One &#39;@  Import the module</description>
    </item>
    
    <item>
      <title>Back to Basics - Variable Names</title>
      <link>https://stevenmurawski.com/2011/05/01/back-to-basics-variable-names/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/back-to-basics-variable-names/</guid>
      <description>$x and $z and $foo just aren&amp;rsquo;t going to cut it in your production scripts.&amp;#160;
Andy Schneider tweeted during the Scripting Games that there was no penalty for providing a descriptive variable name.&amp;#160; He was right and not quite right enough.&amp;#160; Twitter does not provide you the opportunity to share more than a sound bite in one tweet, so he really could not have commented much further there, but he did in a post that expanded on what judges were looking for in style for the Scripting Games.</description>
    </item>
    
    <item>
      <title>Parameter Validation</title>
      <link>https://stevenmurawski.com/2011/05/01/parameter-validation/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/parameter-validation/</guid>
      <description>Glenn Sizemore wrote a great Scripting Games wrap up post about some of the parameter validation options that are available.&amp;#160; Go read it, I&amp;rsquo;ll wait.
The Smackdown - Ensuring You Have A Value Very often you need to make sure that a parameter will not have a null value.&amp;#160; There are a couple of options in making sure you have valid content.
ValidateNotNull vs. ValidateNotNullOrEmpty When you start to look at some of the validation parameters (in about_Advanced_Functions), the two that leap out are the ValidateNotNull and ValidateNotNullOrEmpty.</description>
    </item>
    
    <item>
      <title>Working the Pipeline</title>
      <link>https://stevenmurawski.com/2011/05/01/working-the-pipeline/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/working-the-pipeline/</guid>
      <description>The pipeline is a central concept in PowerShell.&amp;#160; It enables you to chain the output from one command to the input of the next, making automation much smoother.&amp;#160; Making your scripts and functions play nicely with the pipeline can mean really impact the ease of use and adaptability of your functions.
Finding the Value In scripts and advanced functions, declaring a parameter whose value can come from the pipeline is pretty straightforward.</description>
    </item>
    
    <item>
      <title>Back to Basics–Parameters</title>
      <link>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</guid>
      <description>My previous posts about the Scripting Games had many references to how parameters were used in scripts and functions.&amp;#160; Since those posts, I’ve had several requests to expand on that, so here we go…
In the Beginning… In PowerShell V1, when we wrote scripts or functions, we had two main ways to retrieve parameters.
The Dark Ages First off, we could parse $Args.
function Do-Something () { $FirstArgument = $args[0] $SecondArgument = $args[1]</description>
    </item>
    
    <item>
      <title>Better Living Through Splatting</title>
      <link>https://stevenmurawski.com/2011/04/01/better-living-through-splatting/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/better-living-through-splatting/</guid>
      <description>One pattern I&amp;rsquo;ve noticed, especially when dealing with commands that may or may not be executed locally is where a script offers a parameter for the computer name (or a list of computer names).
What Are People Doing? Sometimes, that parameter will be defaulted to $env:ComputerName
[Parameter(Mandatory=$false, Position=1, ValueFromPipeline=$true)][string] $ComputerName = $env:ComputerName
Other times, there will be an if statement checking to see if the parameter is null and assigning $env:ComputerName if it has no other value.</description>
    </item>
    
    <item>
      <title>Caught in a Trap - Dealing with Errors</title>
      <link>https://stevenmurawski.com/2011/04/01/caught-in-a-trap-dealing-with-errors/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/caught-in-a-trap-dealing-with-errors/</guid>
      <description>Errors occur.&amp;#160; Things fail.&amp;#160; As an author of a script, you need to be able to deal with these hiccups.
What Do I Need To Watch For? PowerShell has different types of errors (I explain some of that here.)&amp;#160; Terminating errors can ruin a script&amp;rsquo;s day.&amp;#160; Say you are trying to gather information or update settings to a large number of servers.&amp;#160; What happens when you hit an error on server number three, or number 33, or number 333?</description>
    </item>
    
    <item>
      <title>Checking Out The Environment</title>
      <link>https://stevenmurawski.com/2011/04/01/checking-out-the-environment/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/checking-out-the-environment/</guid>
      <description>If you&amp;rsquo;ve worked with cmd.exe or other shell environments, you might be familiar with environmental variables.
PowerShell exposes these variables in two different ways. (Actually it&amp;rsquo;s the same way, but don&amp;rsquo;t tell anyone..)
So, Spit It Out Already.. First, I can access environmental variables through the provider.
dir env:&amp;lt;/pre&amp;gt;
All my standard commands in navigating and retrieving items from a provider (Get-Item, Set-Item, New-Item, etc..) work in interacting with these variables.</description>
    </item>
    
    <item>
      <title>Clean Up Your Parameters</title>
      <link>https://stevenmurawski.com/2011/04/01/clean-up-your-parameters/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/clean-up-your-parameters/</guid>
      <description>Another tidbit to come from the scripts I&amp;rsquo;ve been reviewing is how messy commands with tons of parameters can be.&amp;#160; You end up with really long lines, uneven lines, and/or lots of backticks.
But What Can We Do? But there are commands that require many parameters or long parameters.&amp;#160; We can only stuff so much in variables, and if we name them clearly, they tend to be longer too.&amp;#160; So how can we deal with this?</description>
    </item>
    
    <item>
      <title>Convert Your Comments to Help</title>
      <link>https://stevenmurawski.com/2011/04/01/convert-your-comments-to-help/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/convert-your-comments-to-help/</guid>
      <description>Version 2 of PowerShell introduced structured help in their work, without having to write MAML help files.
Why Not Write My Own Help Function? One of the things I saw a good bit of in the Scripting Games this year was that people wrote their own help functions.&amp;#160;
The usual pattern included if the script was run with a particular switch or no switch, like My-Script.ps1 –help, a little help text would be spewed out.</description>
    </item>
    
    <item>
      <title>Looking for Help?</title>
      <link>https://stevenmurawski.com/2011/04/01/looking-for-help/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/looking-for-help/</guid>
      <description>PowerShell contains a vast array of content in it&amp;rsquo;s help files.&amp;#160; The help files are exposed by the Get-Help cmdlet.&amp;#160; So, what&amp;rsquo;s really under the covers in the help system?
Finding Help by Keyword PowerShell has a growing surface of things that it can cover.&amp;#160; WMI, COM, .NET, Exchange, Active Directory, SharePoint, and on and on.&amp;#160; How are we ever supposed to find the commands and information we need to use PowerShell effectively.</description>
    </item>
    
    <item>
      <title>Output Options–Use Objects!</title>
      <link>https://stevenmurawski.com/2011/04/01/output-optionsuse-objects/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/output-optionsuse-objects/</guid>
      <description>One area that many people get hung up on in creating a PowerShell script is in the output area. (I’ve been guilty of this too, but I’m trying..)
One Tool to Rule Them All PowerShell embraces the &amp;ldquo;many small tools composed together to create solutions” style of automation, rather than the monolithic “one tool to rule them all (and the command line switches to prove it..)”
What this means is that your script does not have to contain every single export option imagined.</description>
    </item>
    
    <item>
      <title>The Myth of Advanced Functions–CmdletBinding for the Rest of our Scripts</title>
      <link>https://stevenmurawski.com/2011/04/01/the-myth-of-advanced-functionscmdletbinding-for-the-rest-of-our-scripts/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/the-myth-of-advanced-functionscmdletbinding-for-the-rest-of-our-scripts/</guid>
      <description>It’s been killing me to see scripts that are written like V1 functions and having these wonderfully written V2 style advanced functions contained inside of them.
I would like to share a secret about the CmdletBinding, Parameter attribution, and the rest of the capabilities of Advanced Functions.
These features are not just for Functions!
Those Things That Keep Us Apart, Bring Us Together There are a couple of key differences between functions and scripts.</description>
    </item>
    
    <item>
      <title>Using Pipeline Input</title>
      <link>https://stevenmurawski.com/2011/04/01/using-pipeline-input/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/using-pipeline-input/</guid>
      <description>In judging the Scripting Games, I&amp;rsquo;ve found a good number of scripts that are trying to use the Parameter attribute to take pipeline input, but there are several key mistakes.
Why Doesn&amp;rsquo;t This Work? The Problem When you specify a parameter as taking a value from the pipeline, that parameter name is the variable name that you refer to below.&amp;#160;
function Write-SampleData (){ param( [Parameter(ValueFromPipeline=$true,Position=0)] [string] $SampleData )
Write-Host $SampleData  } &amp;lsquo;TestData&amp;rsquo;, &amp;lsquo;TestData2&amp;rsquo;, &amp;lsquo;TestData3&amp;rsquo; | Write-SampleData</description>
    </item>
    
    <item>
      <title>Where to Filter</title>
      <link>https://stevenmurawski.com/2011/04/01/where-to-filter/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/where-to-filter/</guid>
      <description>Where-Object Rocks! PowerShell has some great filtering capabilities.&amp;#160; Where-Object is extremely versatile, allowing you to filter on any logic you can come up with.
I Feel a &amp;quot;But&amp;quot; Coming Up However, many cmdlets, functions, or scripts have some built in filtering capabilities.&amp;#160; These are often optimized for the command, and if the command supports remote connections, often the filtering can happen on the remote host.&amp;#160; Where-Object is the least common denominator in filtering.</description>
    </item>
    
    <item>
      <title>Write-Host Does Just (and Only) That</title>
      <link>https://stevenmurawski.com/2011/04/01/write-host-does-just-and-only-that/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/write-host-does-just-and-only-that/</guid>
      <description>I&amp;rsquo;ve seen a number of scripts that are using Write-Host to display output from their scripts.
For example:
Write-Host &amp;quot;SomeValue = $MyValue&amp;quot;
## So What? I&#39;ll tell you what.. If I want to do anything with that output other than look at it in the console (or perhaps a shell transcript), it gets me nothing.&amp;amp;#160; [I&#39;m not going to rehash why our scripts should return objects rather than text, as I covered that in a previous post](/blog/2011/04/output-optionsuse-objects).</description>
    </item>
    
    <item>
      <title>Connect to External Domain with the Active Directory Provider</title>
      <link>https://stevenmurawski.com/2011/03/01/connect-to-external-domain-with-the-active-directory-provider/</link>
      <pubDate>Tue, 01 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/03/01/connect-to-external-domain-with-the-active-directory-provider/</guid>
      <description>When you import the Active Directory module (either on Server 2008 R2 or Windows 7 with the RSAT), a provider is added to your environment and connects to your current domain.
You can also use the provider to connect to other servers and other domains, as well as connect with alternate credentials (which is very useful as I’ve decided to live as a regular user and elevate to a domain admin account when needed).</description>
    </item>
    
    <item>
      <title>PowerShell Modules for the SysAdmin</title>
      <link>https://stevenmurawski.com/2011/02/01/powershell-modules-for-the-sysadmin/</link>
      <pubDate>Tue, 01 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/02/01/powershell-modules-for-the-sysadmin/</guid>
      <description>Now that I’m back working as a SysAdmin, I’ve come to live in Powershell (even more than I was already)&amp;hellip; I regularly have 4 or more console windows open at any one time, plus the ISE.
There are several modules that just make my work much more accessible from the command prompt rather than digging into a GUI or RDP’ing to a server.
ActiveDirectory – The Active Directory module included with the Win7 RSAT or the RSAT on Server 2008 R2</description>
    </item>
    
    <item>
      <title>Setting Application Compatibility Flags</title>
      <link>https://stevenmurawski.com/2011/02/01/setting-application-compatibility-flags/</link>
      <pubDate>Tue, 01 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/02/01/setting-application-compatibility-flags/</guid>
      <description>There was a post on the PowerShell Facebook group today asking how to set the “Run As Administrator” checkbox on the Compatibility tab of the properties for an application.
The compatibility settings are just registry entries, either under the user’s account or under the local machine.
(You can find them under HKCU:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers or
HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers)
Compatibility settings reference the path of the executable as the value and store the app compat flags in the data for the registry key.</description>
    </item>
    
    <item>
      <title>Lake County .NET Users Group–Slide Deck and Samples</title>
      <link>https://stevenmurawski.com/2010/11/01/lake-county-net-users-groupslide-deck-and-samples/</link>
      <pubDate>Mon, 01 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2010/11/01/lake-county-net-users-groupslide-deck-and-samples/</guid>
      <description>Scott Seely and Tim Stall invited me to give an introduction to PowerShell talk for the Lake County .NET Users Group yesterday evening.
We had a great turnout and a number of good questions.&amp;#160; Thank you to everyone who gave up part of their evening to come and learn a bit about the .NET command shell goodness that is PowerShell.&amp;#160;
I’ve uploaded the slide deck, sample scripts, and sample Visual Studio solution here.</description>
    </item>
    
    <item>
      <title>Adding Configuration To Remoting</title>
      <link>https://stevenmurawski.com/2010/07/01/adding-configuration-to-remoting/</link>
      <pubDate>Thu, 01 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2010/07/01/adding-configuration-to-remoting/</guid>
      <description>This is a pretty brief post that will need some further elaboration, but Twitter doesn’t provide the best mechanism for longer examples.
There are two places where you can configure your remote sessions..
1) On the remote server – which is covered in a number of places and probably the most discoverable place to put configuration information..&amp;#160; See the help for about_Session_Configurations.
2) Locally, when you start the PSSession.&amp;#160; This is where we will dig deeper.</description>
    </item>
    
    <item>
      <title>Script Injection with Set-PSBreakpoint</title>
      <link>https://stevenmurawski.com/2010/01/01/script-injection-with-set-psbreakpoint/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2010/01/01/script-injection-with-set-psbreakpoint/</guid>
      <description>I’ve used the integrated debugging features with PowerShell V2 since I’ve had it available, but I never really dug below the surface of setting breakpoints at certain lines.
Set-PSBreakpoint offers some additional options of which I was not aware.
 Setting a breakpoint in relation to a variable (read, assigned, or both) Setting a breakpoint when a function or command is called Setting a breakpoint based on the column number for the referenced line Run a scriptblock when a breakpoint is hit Breakpoints do not need to be set on a script  Let’s dig into these in a bit more detail:</description>
    </item>
    
    <item>
      <title>Script Club – Coming to the Greater Milwaukee Area</title>
      <link>https://stevenmurawski.com/2009/12/01/script-club-coming-to-the-greater-milwaukee-area/</link>
      <pubDate>Tue, 01 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/12/01/script-club-coming-to-the-greater-milwaukee-area/</guid>
      <description>Register here. About PowerShell Script Club  You Always Talk About Script club 2. You Always Talk About Script Club 3. If Someone asks for Help, And You Can Help, You Help 4. Two People Help One Person at One Time 5. One Module Per Person Per Night 6. All Scripts, All PowerShell 7. Scripts will be as short as they can be 8. If This is your First time at Script Club, You Have to Script  The first Greater Milwaukee PowerShell Script Club is being formed.</description>
    </item>
    
    <item>
      <title>So Easy, I Could Kick Myself</title>
      <link>https://stevenmurawski.com/2009/11/01/so-easy-i-could-kick-myself/</link>
      <pubDate>Sun, 01 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/11/01/so-easy-i-could-kick-myself/</guid>
      <description>I’m updating Crystal Reports and trying to determine which reports might have been affected by some schema changes or functional changes in how the data was being stored. The problem I’ve had is that when there are a large number of reports, it is very time consuming to open each one, look at it, and see if it contains any affected tables or views.
I’ve had to deal with this in my previous role as well.</description>
    </item>
    
    <item>
      <title>Using the Sync Framework from PowerShell</title>
      <link>https://stevenmurawski.com/2009/11/01/using-the-sync-framework-from-powershell/</link>
      <pubDate>Sun, 01 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/11/01/using-the-sync-framework-from-powershell/</guid>
      <description>I’ve been exploring the Sync Framework for use in a couple of projects I have going and PowerShell is my preferred exploratory environment.
It was a bit of fun, since I got to work with eventing for the first time in V2.
First, I downloaded the Sync Framework Software Development Kit. That provided me with the Sync Framework runtime as well as some documentation.
The easiest way for me to get started was to take one of the samples and convert that to PowerShell.</description>
    </item>
    
    <item>
      <title>Deep Dive: Error Handling – Error Types (part 1)</title>
      <link>https://stevenmurawski.com/2009/07/01/deep-dive-error-handling-error-types-part-1/</link>
      <pubDate>Wed, 01 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/07/01/deep-dive-error-handling-error-types-part-1/</guid>
      <description>I started looking a little deeper at error handling in PowerShell after this StackOverflow question. PowerShell has two kinds of errors – terminating errors and non-terminating errors.
Terminating errors are the errors that can stop command execution cold. Non-terminating errors provided an additional challenge, as you need to be notified of failed operations and continue with pipeline operations. To deal with this issue and to provide additional output options, PowerShell employs the concept of streams.</description>
    </item>
    
  </channel>
</rss>