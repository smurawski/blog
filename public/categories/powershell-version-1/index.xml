<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell Version 1 on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</title>
    <link>https://stevenmurawski.com/categories/powershell-version-1/</link>
    <description>Recent content in Powershell Version 1 on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Apr 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://stevenmurawski.com/categories/powershell-version-1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Back to Basics–Parameters</title>
      <link>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</guid>
      <description>My previous posts about the Scripting Games had many references to how parameters were used in scripts and functions.&amp;#160; Since those posts, I’ve had several requests to expand on that, so here we go…
In the Beginning… In PowerShell V1, when we wrote scripts or functions, we had two main ways to retrieve parameters.
The Dark Ages First off, we could parse $Args.
function Do-Something () { $FirstArgument = $args[0] $SecondArgument = $args[1]</description>
    </item>
    
    <item>
      <title>Write-Host Does Just (and Only) That</title>
      <link>https://stevenmurawski.com/2011/04/01/write-host-does-just-and-only-that/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/write-host-does-just-and-only-that/</guid>
      <description>I&amp;rsquo;ve seen a number of scripts that are using Write-Host to display output from their scripts.
For example:
Write-Host &amp;quot;SomeValue = $MyValue&amp;quot;
## So What? I&#39;ll tell you what.. If I want to do anything with that output other than look at it in the console (or perhaps a shell transcript), it gets me nothing.&amp;amp;#160; [I&#39;m not going to rehash why our scripts should return objects rather than text, as I covered that in a previous post](/blog/2011/04/output-optionsuse-objects).</description>
    </item>
    
    <item>
      <title>Script Club – Coming to the Greater Milwaukee Area</title>
      <link>https://stevenmurawski.com/2009/12/01/script-club-coming-to-the-greater-milwaukee-area/</link>
      <pubDate>Tue, 01 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/12/01/script-club-coming-to-the-greater-milwaukee-area/</guid>
      <description>Register here. About PowerShell Script Club  You Always Talk About Script club 2. You Always Talk About Script Club 3. If Someone asks for Help, And You Can Help, You Help 4. Two People Help One Person at One Time 5. One Module Per Person Per Night 6. All Scripts, All PowerShell 7. Scripts will be as short as they can be 8. If This is your First time at Script Club, You Have to Script  The first Greater Milwaukee PowerShell Script Club is being formed.</description>
    </item>
    
    <item>
      <title>Deep Dive: Error Handling – Error Types (part 1)</title>
      <link>https://stevenmurawski.com/2009/07/01/deep-dive-error-handling-error-types-part-1/</link>
      <pubDate>Wed, 01 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/07/01/deep-dive-error-handling-error-types-part-1/</guid>
      <description>I started looking a little deeper at error handling in PowerShell after this StackOverflow question. PowerShell has two kinds of errors – terminating errors and non-terminating errors.
Terminating errors are the errors that can stop command execution cold. Non-terminating errors provided an additional challenge, as you need to be notified of failed operations and continue with pipeline operations. To deal with this issue and to provide additional output options, PowerShell employs the concept of streams.</description>
    </item>
    
    <item>
      <title>PowerShell, VMWare, and VESI in Wisconsin</title>
      <link>https://stevenmurawski.com/2009/04/01/powershell-vmware-and-vesi-in-wisconsin/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/04/01/powershell-vmware-and-vesi-in-wisconsin/</guid>
      <description>On May 19th, Scott Herold and I will be presenting for the Wisconsin VMWare Users Group. I&amp;rsquo;ll be covering the basics of PowerShell, as well as an introduction to the VI Toolkit (for Windows)/PowerCLI.
Scott will be talking about the Virtualization EcoShell Initiative (VESI).
If you are in Wisconsin, the meeting details can be found here.
If you are not able to make the meeting, VMWare will be providing a live stream of our presentations via WebEx, as well as providing recordings after the fact.</description>
    </item>
    
    <item>
      <title>Coming To A WSUS Server Near You –&gt; PowerShell V1.0</title>
      <link>https://stevenmurawski.com/2009/03/01/coming-to-a-wsus-server-near-you-powershell-v10/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/coming-to-a-wsus-server-near-you-powershell-v10/</guid>
      <description>Richard Siddaway has just posted that PowerShell 1.0 is available as an optional update.
I just checked my WSUS Server and there it is!!! Deployment is now a snap.
More details in his blog post.. or in the MS Knowledge Base.</description>
    </item>
    
    <item>
      <title>Exploring the .NET Framework with PowerShell – Constructors (Part 3)</title>
      <link>https://stevenmurawski.com/2009/03/01/exploring-the-net-framework-with-powershell-constructors-part-3/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/exploring-the-net-framework-with-powershell-constructors-part-3/</guid>
      <description>In part 2(a &amp;amp; b) of this series, we talked about methods and looked at ways to view their overloads, or ways to call them.&amp;#160; We also looked at the objects returned from a method call.&amp;#160; In this post, we are going to explore a special kind of method called the constructor.
A constructor is a method whose job is to create the object that you want to work with.&amp;#160; When I created the Ping object</description>
    </item>
    
    <item>
      <title>How To Send E-Mail From PowerShell</title>
      <link>https://stevenmurawski.com/2009/03/01/how-to-send-e-mail-from-powershell/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/how-to-send-e-mail-from-powershell/</guid>
      <description>In my Exploring the .NET Framework series, I introduced the System.Net.Mail.MailMessage class. Being able to create a MailMessage object is all well and good, but if you can’t send it, it’s really not helpful.
Updated - This mainly applies to V1 of PowerShell. V2 has a built in cmdlet for this purpose. To send an email from PowerShell using the .NET Framework, you can use the System.Net.Mail.SMTPClient class.
First, you need to create your MailMessage</description>
    </item>
    
    <item>
      <title>Tip: Passing Parameters</title>
      <link>https://stevenmurawski.com/2009/03/01/tip-passing-parameters/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/tip-passing-parameters/</guid>
      <description>Jeffery Hicks recently talked about the Param statement in his Prof. Powershell column for MCP Magazine (Keeping Your Options Open). If you are new to PowerShell, I would definitely recommend reading the article, as provides a nice introduction to the Param statement. Jeffrey recommended to cast your parameter as the type of object that you are expecting, as way to catch errors. I wholeheartedly agree. That can cause trouble though, if you want to allow consumers of your script to pass in one or more values for that parameter.</description>
    </item>
    
    <item>
      <title>Tip: Passing Parameters Revisited</title>
      <link>https://stevenmurawski.com/2009/03/01/tip-passing-parameters-revisited/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/tip-passing-parameters-revisited/</guid>
      <description>In this post. Jeff describes how you can make a function act more like a cmdlet. The problem that you run into in V1 of PoweShell is that it is easy to make your functions work with the pipeline
Function Check-Service { Param([string]$service=”spooler” ) PROCESS { $wmi=get-wmiobject win32_service -filter “name=’$service’” -computername $_ if ($wmi.state -eq “running”) { write $True } else { write $False } } } Get-Content servers.txt | Check-Service</description>
    </item>
    
    <item>
      <title>Adding Custom Properties to Functions</title>
      <link>https://stevenmurawski.com/2009/02/01/adding-custom-properties-to-functions/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/adding-custom-properties-to-functions/</guid>
      <description>A question was asked on StackOverflow regarding how to add properties to a function, and then be able to retain that custom property when recalling that function from the function Provider.&amp;#160;&amp;#160; I’m not going to copy my answer here, but I do want to throw out a possible work around for this issue.&amp;#160;
(It has been bugging me and I can’t really concentrate on my other tasks, so I need to get this out of the way.</description>
    </item>
    
    <item>
      <title>Comparing Database Schemas</title>
      <link>https://stevenmurawski.com/2009/02/01/comparing-database-schemas/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/comparing-database-schemas/</guid>
      <description>I regularly am working with several versions of a database for an application that I manage (a live database, training database, test database, and previous version database).&amp;#160; Occasionally, I need to know what the differences between the databases are, especially after our vendor updates my test environment or right after an update in my training or live environment.&amp;#160;
Since I spend a good portion of my day in PowerShell, I wrapped some system table queries in a PowerShell script and use Compare-Object to find any differences in the tables and compare the column definitions as well.</description>
    </item>
    
    <item>
      <title>Dealing with WMI Timeouts</title>
      <link>https://stevenmurawski.com/2009/01/01/dealing-with-wmi-timeouts/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/01/01/dealing-with-wmi-timeouts/</guid>
      <description>There was a question in the PowerShellCommunity.Org forums about WMI timeouts.
I did some digging and found there are several different types of timeouts that can affect your WMI queries.&amp;#160; I’m still working through different scenarios and I’d appreciate any feedback.
The first type of timeout can occur if the machine that you are targeting does not respond to network traffic (it’s down, you have the wrong IP address, firewalled, etc.</description>
    </item>
    
  </channel>
</rss>