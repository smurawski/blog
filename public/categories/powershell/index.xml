<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</title>
    <link>https://stevenmurawski.com/categories/powershell/</link>
    <description>Recent content in Powershell on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Jan 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://stevenmurawski.com/categories/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PowerShell V3 – Auto-loading of Modules</title>
      <link>https://stevenmurawski.com/2012/01/01/powershell-v3-auto-loading-of-modules/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2012/01/01/powershell-v3-auto-loading-of-modules/</guid>
      <description>PowerShell V3 includes a new “feature” – Auto-loading of modules.
What Does It Do? Module discovery has been updated to make the exported commands for modules that are not loaded visible in a PowerShell session.
In Version 2, if you run Get-Module on a module that is not loaded but in your PSModulePath, you’ll get some metadata about the module, but nothing about the ExportedFunctions, ExportedCmdlets, ExportedAliases, or ExportedVariables.&amp;nbsp;</description>
    </item>
    
    <item>
      <title>PowerShell V3 – Default Parameter Values</title>
      <link>https://stevenmurawski.com/2012/01/01/powershell-v3-default-parameter-values/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2012/01/01/powershell-v3-default-parameter-values/</guid>
      <description>PowerShell Version 3 introduces the concept of Default Parameter Values.
This allows you to specify a value for one or more parameters for one or more commands.
To implement this, you need to populate a new hashtable – $PSDefaultParameterValues
That Description is Not Helpful Let’s look at some examples -
First off, we can specify the value for a parameter for a specific command.&amp;#160; The pattern used for the hashtable entries is “NameOfCommand:NameOfParameter” = “ValueOfParameter”.</description>
    </item>
    
    <item>
      <title>Checking Your Pipes For Leaks</title>
      <link>https://stevenmurawski.com/2011/09/01/checking-your-pipes-for-leaks/</link>
      <pubDate>Thu, 01 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/09/01/checking-your-pipes-for-leaks/</guid>
      <description>(NOTE: I started this post a few weeks ago)
This morning I woke up with my kitchen floor covered in water.&amp;#160; As I was cleaning it up, I couldn&amp;rsquo;t help drawing some parallels between fixing a leaky pipe and a &amp;quot;leaky&amp;quot; (non-performing) script.
My repair process this morning took the following steps:
 Contain the leak Locate the source of the leak Stop the leak Check for related damage Mitigate the related damage Patch the leak&amp;#160; Confirm the leak is fixed Monitor the leak site  Since most of you won&amp;rsquo;t really care about the plumbing in my kitchen, let&amp;rsquo;s run through how dealing with this problem applies to troubleshooting a misbehaving script (or function).</description>
    </item>
    
    <item>
      <title>Resources for the WI .NET User Group</title>
      <link>https://stevenmurawski.com/2011/09/01/resources-for-the-wi-net-user-group/</link>
      <pubDate>Thu, 01 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/09/01/resources-for-the-wi-net-user-group/</guid>
      <description>I&amp;rsquo;ll get the slides posted sometime (in the middle of migrating my machine to the developer preview of Win 8), but the links I mentioned are:
—Project Home - http://www.show-ui.com
—CodeplexSite - http://showui.codeplex.com
—Doug Finke’s Blog - http://dougfinke.com/blog
—Joel “Jaykul” Bennet’sBlog - http://huddledmasses.org
—James Brundage’sBlog - http://blog.start-automating.com/</description>
    </item>
    
    <item>
      <title>Back to Basics - Variable Names</title>
      <link>https://stevenmurawski.com/2011/05/01/back-to-basics-variable-names/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/back-to-basics-variable-names/</guid>
      <description>$x and $z and $foo just aren&amp;rsquo;t going to cut it in your production scripts.&amp;#160;
Andy Schneider tweeted during the Scripting Games that there was no penalty for providing a descriptive variable name.&amp;#160; He was right and not quite right enough.&amp;#160; Twitter does not provide you the opportunity to share more than a sound bite in one tweet, so he really could not have commented much further there, but he did in a post that expanded on what judges were looking for in style for the Scripting Games.</description>
    </item>
    
    <item>
      <title>Parameter Validation</title>
      <link>https://stevenmurawski.com/2011/05/01/parameter-validation/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/parameter-validation/</guid>
      <description>Glenn Sizemore wrote a great Scripting Games wrap up post about some of the parameter validation options that are available.&amp;#160; Go read it, I&amp;rsquo;ll wait.
The Smackdown - Ensuring You Have A Value Very often you need to make sure that a parameter will not have a null value.&amp;#160; There are a couple of options in making sure you have valid content.
ValidateNotNull vs. ValidateNotNullOrEmpty When you start to look at some of the validation parameters (in about_Advanced_Functions), the two that leap out are the ValidateNotNull and ValidateNotNullOrEmpty.</description>
    </item>
    
    <item>
      <title>Working the Pipeline</title>
      <link>https://stevenmurawski.com/2011/05/01/working-the-pipeline/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/working-the-pipeline/</guid>
      <description>The pipeline is a central concept in PowerShell.&amp;#160; It enables you to chain the output from one command to the input of the next, making automation much smoother.&amp;#160; Making your scripts and functions play nicely with the pipeline can mean really impact the ease of use and adaptability of your functions.
Finding the Value In scripts and advanced functions, declaring a parameter whose value can come from the pipeline is pretty straightforward.</description>
    </item>
    
    <item>
      <title>Back to Basics–Parameters</title>
      <link>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</guid>
      <description>My previous posts about the Scripting Games had many references to how parameters were used in scripts and functions.&amp;#160; Since those posts, I’ve had several requests to expand on that, so here we go…
In the Beginning… In PowerShell V1, when we wrote scripts or functions, we had two main ways to retrieve parameters.
The Dark Ages First off, we could parse $Args.
function Do-Something () { $FirstArgument = $args[0] $SecondArgument = $args[1]</description>
    </item>
    
    <item>
      <title>Better Living Through Splatting</title>
      <link>https://stevenmurawski.com/2011/04/01/better-living-through-splatting/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/better-living-through-splatting/</guid>
      <description>One pattern I&amp;rsquo;ve noticed, especially when dealing with commands that may or may not be executed locally is where a script offers a parameter for the computer name (or a list of computer names).
What Are People Doing? Sometimes, that parameter will be defaulted to $env:ComputerName
[Parameter(Mandatory=$false, Position=1, ValueFromPipeline=$true)][string] $ComputerName = $env:ComputerName
Other times, there will be an if statement checking to see if the parameter is null and assigning $env:ComputerName if it has no other value.</description>
    </item>
    
    <item>
      <title>Checking Out The Environment</title>
      <link>https://stevenmurawski.com/2011/04/01/checking-out-the-environment/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/checking-out-the-environment/</guid>
      <description>If you&amp;rsquo;ve worked with cmd.exe or other shell environments, you might be familiar with environmental variables.
PowerShell exposes these variables in two different ways. (Actually it&amp;rsquo;s the same way, but don&amp;rsquo;t tell anyone..)
So, Spit It Out Already.. First, I can access environmental variables through the provider.
dir env:&amp;lt;/pre&amp;gt;
All my standard commands in navigating and retrieving items from a provider (Get-Item, Set-Item, New-Item, etc..) work in interacting with these variables.</description>
    </item>
    
    <item>
      <title>Clean Up Your Parameters</title>
      <link>https://stevenmurawski.com/2011/04/01/clean-up-your-parameters/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/clean-up-your-parameters/</guid>
      <description>Another tidbit to come from the scripts I&amp;rsquo;ve been reviewing is how messy commands with tons of parameters can be.&amp;#160; You end up with really long lines, uneven lines, and/or lots of backticks.
But What Can We Do? But there are commands that require many parameters or long parameters.&amp;#160; We can only stuff so much in variables, and if we name them clearly, they tend to be longer too.&amp;#160; So how can we deal with this?</description>
    </item>
    
    <item>
      <title>Convert Your Comments to Help</title>
      <link>https://stevenmurawski.com/2011/04/01/convert-your-comments-to-help/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/convert-your-comments-to-help/</guid>
      <description>Version 2 of PowerShell introduced structured help in their work, without having to write MAML help files.
Why Not Write My Own Help Function? One of the things I saw a good bit of in the Scripting Games this year was that people wrote their own help functions.&amp;#160;
The usual pattern included if the script was run with a particular switch or no switch, like My-Script.ps1 –help, a little help text would be spewed out.</description>
    </item>
    
    <item>
      <title>Looking for Help?</title>
      <link>https://stevenmurawski.com/2011/04/01/looking-for-help/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/looking-for-help/</guid>
      <description>PowerShell contains a vast array of content in it&amp;rsquo;s help files.&amp;#160; The help files are exposed by the Get-Help cmdlet.&amp;#160; So, what&amp;rsquo;s really under the covers in the help system?
Finding Help by Keyword PowerShell has a growing surface of things that it can cover.&amp;#160; WMI, COM, .NET, Exchange, Active Directory, SharePoint, and on and on.&amp;#160; How are we ever supposed to find the commands and information we need to use PowerShell effectively.</description>
    </item>
    
    <item>
      <title>Output Options–Use Objects!</title>
      <link>https://stevenmurawski.com/2011/04/01/output-optionsuse-objects/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/output-optionsuse-objects/</guid>
      <description>One area that many people get hung up on in creating a PowerShell script is in the output area. (I’ve been guilty of this too, but I’m trying..)
One Tool to Rule Them All PowerShell embraces the &amp;ldquo;many small tools composed together to create solutions” style of automation, rather than the monolithic “one tool to rule them all (and the command line switches to prove it..)”
What this means is that your script does not have to contain every single export option imagined.</description>
    </item>
    
    <item>
      <title>The Myth of Advanced Functions–CmdletBinding for the Rest of our Scripts</title>
      <link>https://stevenmurawski.com/2011/04/01/the-myth-of-advanced-functionscmdletbinding-for-the-rest-of-our-scripts/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/the-myth-of-advanced-functionscmdletbinding-for-the-rest-of-our-scripts/</guid>
      <description>It’s been killing me to see scripts that are written like V1 functions and having these wonderfully written V2 style advanced functions contained inside of them.
I would like to share a secret about the CmdletBinding, Parameter attribution, and the rest of the capabilities of Advanced Functions.
These features are not just for Functions!
Those Things That Keep Us Apart, Bring Us Together There are a couple of key differences between functions and scripts.</description>
    </item>
    
    <item>
      <title>Using Pipeline Input</title>
      <link>https://stevenmurawski.com/2011/04/01/using-pipeline-input/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/using-pipeline-input/</guid>
      <description>In judging the Scripting Games, I&amp;rsquo;ve found a good number of scripts that are trying to use the Parameter attribute to take pipeline input, but there are several key mistakes.
Why Doesn&amp;rsquo;t This Work? The Problem When you specify a parameter as taking a value from the pipeline, that parameter name is the variable name that you refer to below.&amp;#160;
function Write-SampleData (){ param( [Parameter(ValueFromPipeline=$true,Position=0)] [string] $SampleData )
Write-Host $SampleData  } &amp;lsquo;TestData&amp;rsquo;, &amp;lsquo;TestData2&amp;rsquo;, &amp;lsquo;TestData3&amp;rsquo; | Write-SampleData</description>
    </item>
    
    <item>
      <title>Where to Filter</title>
      <link>https://stevenmurawski.com/2011/04/01/where-to-filter/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/where-to-filter/</guid>
      <description>Where-Object Rocks! PowerShell has some great filtering capabilities.&amp;#160; Where-Object is extremely versatile, allowing you to filter on any logic you can come up with.
I Feel a &amp;quot;But&amp;quot; Coming Up However, many cmdlets, functions, or scripts have some built in filtering capabilities.&amp;#160; These are often optimized for the command, and if the command supports remote connections, often the filtering can happen on the remote host.&amp;#160; Where-Object is the least common denominator in filtering.</description>
    </item>
    
    <item>
      <title>Write-Host Does Just (and Only) That</title>
      <link>https://stevenmurawski.com/2011/04/01/write-host-does-just-and-only-that/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/write-host-does-just-and-only-that/</guid>
      <description>I&amp;rsquo;ve seen a number of scripts that are using Write-Host to display output from their scripts.
For example:
Write-Host &amp;quot;SomeValue = $MyValue&amp;quot;
## So What? I&#39;ll tell you what.. If I want to do anything with that output other than look at it in the console (or perhaps a shell transcript), it gets me nothing.&amp;amp;#160; [I&#39;m not going to rehash why our scripts should return objects rather than text, as I covered that in a previous post](/blog/2011/04/output-optionsuse-objects).</description>
    </item>
    
    <item>
      <title>Lake County .NET Users Group–Slide Deck and Samples</title>
      <link>https://stevenmurawski.com/2010/11/01/lake-county-net-users-groupslide-deck-and-samples/</link>
      <pubDate>Mon, 01 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2010/11/01/lake-county-net-users-groupslide-deck-and-samples/</guid>
      <description>Scott Seely and Tim Stall invited me to give an introduction to PowerShell talk for the Lake County .NET Users Group yesterday evening.
We had a great turnout and a number of good questions.&amp;#160; Thank you to everyone who gave up part of their evening to come and learn a bit about the .NET command shell goodness that is PowerShell.&amp;#160;
I’ve uploaded the slide deck, sample scripts, and sample Visual Studio solution here.</description>
    </item>
    
    <item>
      <title>Adding Configuration To Remoting</title>
      <link>https://stevenmurawski.com/2010/07/01/adding-configuration-to-remoting/</link>
      <pubDate>Thu, 01 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2010/07/01/adding-configuration-to-remoting/</guid>
      <description>This is a pretty brief post that will need some further elaboration, but Twitter doesn’t provide the best mechanism for longer examples.
There are two places where you can configure your remote sessions..
1) On the remote server – which is covered in a number of places and probably the most discoverable place to put configuration information..&amp;#160; See the help for about_Session_Configurations.
2) Locally, when you start the PSSession.&amp;#160; This is where we will dig deeper.</description>
    </item>
    
    <item>
      <title>Script Injection with Set-PSBreakpoint</title>
      <link>https://stevenmurawski.com/2010/01/01/script-injection-with-set-psbreakpoint/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2010/01/01/script-injection-with-set-psbreakpoint/</guid>
      <description>I’ve used the integrated debugging features with PowerShell V2 since I’ve had it available, but I never really dug below the surface of setting breakpoints at certain lines.
Set-PSBreakpoint offers some additional options of which I was not aware.
 Setting a breakpoint in relation to a variable (read, assigned, or both) Setting a breakpoint when a function or command is called Setting a breakpoint based on the column number for the referenced line Run a scriptblock when a breakpoint is hit Breakpoints do not need to be set on a script  Let’s dig into these in a bit more detail:</description>
    </item>
    
    <item>
      <title>Script Club – Coming to the Greater Milwaukee Area</title>
      <link>https://stevenmurawski.com/2009/12/01/script-club-coming-to-the-greater-milwaukee-area/</link>
      <pubDate>Tue, 01 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/12/01/script-club-coming-to-the-greater-milwaukee-area/</guid>
      <description>Register here. About PowerShell Script Club  You Always Talk About Script club 2. You Always Talk About Script Club 3. If Someone asks for Help, And You Can Help, You Help 4. Two People Help One Person at One Time 5. One Module Per Person Per Night 6. All Scripts, All PowerShell 7. Scripts will be as short as they can be 8. If This is your First time at Script Club, You Have to Script  The first Greater Milwaukee PowerShell Script Club is being formed.</description>
    </item>
    
    <item>
      <title>So Easy, I Could Kick Myself</title>
      <link>https://stevenmurawski.com/2009/11/01/so-easy-i-could-kick-myself/</link>
      <pubDate>Sun, 01 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/11/01/so-easy-i-could-kick-myself/</guid>
      <description>I’m updating Crystal Reports and trying to determine which reports might have been affected by some schema changes or functional changes in how the data was being stored. The problem I’ve had is that when there are a large number of reports, it is very time consuming to open each one, look at it, and see if it contains any affected tables or views.
I’ve had to deal with this in my previous role as well.</description>
    </item>
    
    <item>
      <title>Using the Sync Framework from PowerShell</title>
      <link>https://stevenmurawski.com/2009/11/01/using-the-sync-framework-from-powershell/</link>
      <pubDate>Sun, 01 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/11/01/using-the-sync-framework-from-powershell/</guid>
      <description>I’ve been exploring the Sync Framework for use in a couple of projects I have going and PowerShell is my preferred exploratory environment.
It was a bit of fun, since I got to work with eventing for the first time in V2.
First, I downloaded the Sync Framework Software Development Kit. That provided me with the Sync Framework runtime as well as some documentation.
The easiest way for me to get started was to take one of the samples and convert that to PowerShell.</description>
    </item>
    
    <item>
      <title>Dear Devs,  Give Us The Tools.  K Thx</title>
      <link>https://stevenmurawski.com/2009/07/01/dear-devs-give-us-the-tools-k-thx/</link>
      <pubDate>Wed, 01 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/07/01/dear-devs-give-us-the-tools-k-thx/</guid>
      <description>I just finished listening to the latest Herding Code podcast (#52) where the hosts (K. Scott Allen, Kevin Dente, Scott Koon, and Jon Galloway) talked with Alan Stevens ( C# MVP and ASP Insider) and G. Andrew Duthie (author and Microsoft Developer Evangelist) about a debate that began on Twitter regarding “Real Software Development vs Microsoft Bubble Development”. What does that have to do with PowerShell and administrative tools? The specifics of their conversation don’t have a lot of relevance to administrators and scripters, but one of the directions that their conversation took really resonated with me.</description>
    </item>
    
    <item>
      <title>Exploring the .NET Framework with PowerShell – Garbage Collection (Part 6)</title>
      <link>https://stevenmurawski.com/2009/07/01/exploring-the-net-framework-with-powershell-garbage-collection-part-6/</link>
      <pubDate>Wed, 01 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/07/01/exploring-the-net-framework-with-powershell-garbage-collection-part-6/</guid>
      <description>Garbage collection is a process that the .NET Framework (upon which the PowerShell runtime works) uses to manage memory.&amp;#160; The garbage collection (for applications – services are handled a bit differently) process basically covers X steps:
 Identify objects that won’t be used Delete them from memory Compact the space to make room for new objects  The first step is the critical point for PowerShell users.&amp;#160; You may have noticed how the memory used in a PowerShell session can steadily climb (or suddenly climb if you’re dealing with a large number of objects).</description>
    </item>
    
    <item>
      <title>PowerShell in Azure</title>
      <link>https://stevenmurawski.com/2009/07/01/powershell-in-azure/</link>
      <pubDate>Wed, 01 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/07/01/powershell-in-azure/</guid>
      <description>The July CTP release of the Windows Azure SDK contains a new sample project called PowerShellRole which demonstrates that PowerShell is available in the cloud!
Previous versions of the CTP have come with a sample Provider which you could use to access Azure storage (blobs, queues, and tables), but this actually provides demonstration of creating runspaces and executing pipelines in the cloud.
Now to see what version is running in the cloud!</description>
    </item>
    
    <item>
      <title>More PowerShell on the Thirsty Developer</title>
      <link>https://stevenmurawski.com/2009/06/01/more-powershell-on-the-thirsty-developer/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/06/01/more-powershell-on-the-thirsty-developer/</guid>
      <description>Larry Clarkin asked me back on the Thirsty Developer to continue talking about development and PowerShell.&amp;#160; We talked about creating cmdlets, hosting PowerShell, and a bit about Version 2.&amp;#160; Check it out here.</description>
    </item>
    
    <item>
      <title>Response: Give Me A Coconut and Six Months</title>
      <link>https://stevenmurawski.com/2009/06/01/response-give-me-a-coconut-and-six-months/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/06/01/response-give-me-a-coconut-and-six-months/</guid>
      <description>I was tagged by SQL Server Expert Brent Ozar in his response to a great, thought provoking blog post called Give Me a Coconut and Six Months by Tim Ford (SQLAgentMan on Twitter).
The short summary of the post is if you had six months free of distraction, what would you turn your attention to.&amp;#160; Tim’s choices included backups, security, and monitoring, which I think is a great “solid foundation” to work from.</description>
    </item>
    
    <item>
      <title>Tip: Focus Your Scripts and Functions</title>
      <link>https://stevenmurawski.com/2009/06/01/tip-focus-your-scripts-and-functions/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/06/01/tip-focus-your-scripts-and-functions/</guid>
      <description>The PowerShell paradigm is the task based cmdlet.&amp;#160; With cmdlets that surface a single function that handle a multitude of inputs, a PowerShell session or script can read back like a sentence.&amp;#160;
Get-Process –Name iexplore | Where-Object {$_.WorkingSet –gt 50000000 } | Stop-Process
In the above (often overused, but illustrates the point well) example, Get-Process, Where-Object, and Stop-Process all accurately describe the task that they perform.
We can take this same approach with our scripts and functions.</description>
    </item>
    
    <item>
      <title>Tip: Keeping Your Scripts DRY.</title>
      <link>https://stevenmurawski.com/2009/06/01/tip-keeping-your-scripts-dry/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/06/01/tip-keeping-your-scripts-dry/</guid>
      <description>DRY?&amp;#160; Does this mean I can’t use PowerShell on a water-cooled PC?
DRY is a principle that can be very familiar to the PowerShell aficionado with a development background.&amp;#160; DRY means Don’t Repeat Yourself.&amp;#160; Keeping your scripts DRY means that our scripts don’t contain repeated code.&amp;#160; Copy/Paste is not your friend!
Why should PowerShell scripters care about keeping their PowerShell DRY?&amp;#160; One major reason – script maintainability.
PowerShell has a huge advantage over scripting environments/shells in that the noun/verb structure lends itself to very readable scripts.</description>
    </item>
    
    <item>
      <title>WI VMUG Presentation with Scott Herold</title>
      <link>https://stevenmurawski.com/2009/05/01/wi-vmug-presentation-with-scott-herold/</link>
      <pubDate>Fri, 01 May 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/05/01/wi-vmug-presentation-with-scott-herold/</guid>
      <description>This morning, Scott Herold and I did back to back presentations on PowerShell and the Virtualization EcoShell for the Wisconsin VMWare Users Group. Time flew by and I didn’t get to the second half of my slide deck, so if you are interested, here it is.
If you want to see the webcast, you can find it here. Just a word of warning, I haven’t listened to it yet, but we were recording over Skype and a fixed microphone while speaking over another mic in a larger room.</description>
    </item>
    
    <item>
      <title>Exploring the .NET Framework with PowerShell – Namespaces (Part 5)</title>
      <link>https://stevenmurawski.com/2009/04/01/exploring-the-net-framework-with-powershell-namespaces-part-5/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/04/01/exploring-the-net-framework-with-powershell-namespaces-part-5/</guid>
      <description>One concept that is central to the understanding of the layout of classes in the Base Class Libraries is the Namespace. Namespaces are a method of providing context for classes (and other constructs like Enums and Structs), allowing developers to group related classes and not worry about name collisions with development in other areas. In the Base Class Libraries, the root namespace is the System namespace. The System namespace defines a large amount of the base types, like Object (which all classes derive from), String, DateTime, Boolean, and numerous others.</description>
    </item>
    
    <item>
      <title>PowerShell, VMWare, and VESI in Wisconsin</title>
      <link>https://stevenmurawski.com/2009/04/01/powershell-vmware-and-vesi-in-wisconsin/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/04/01/powershell-vmware-and-vesi-in-wisconsin/</guid>
      <description>On May 19th, Scott Herold and I will be presenting for the Wisconsin VMWare Users Group. I&amp;rsquo;ll be covering the basics of PowerShell, as well as an introduction to the VI Toolkit (for Windows)/PowerCLI.
Scott will be talking about the Virtualization EcoShell Initiative (VESI).
If you are in Wisconsin, the meeting details can be found here.
If you are not able to make the meeting, VMWare will be providing a live stream of our presentations via WebEx, as well as providing recordings after the fact.</description>
    </item>
    
    <item>
      <title>Tip: Calculated Properties</title>
      <link>https://stevenmurawski.com/2009/04/01/tip-calculated-properties/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/04/01/tip-calculated-properties/</guid>
      <description>I really enjoy Jeffery Hicks&amp;rsquo;s Prof. PowerShell column. In two of his recent columns (Perfect Properties and Label Me Perfect), Jeffery goes in to &amp;ldquo;calculated properties&amp;rdquo;. A calculated property is a hashtable passed to the Select-Object or Format-* cmdlets as one of the properties to return.
Here is an example from Label Me Perfect:
  PS C:&amp;amp;gt; get-wmiobject Win32logicaldisk -filter &amp;ldquo;drivetype=3&amp;rdquo;  -computer &amp;quot;mycompany-dc01&amp;quot; | Format-table DeviceID,VolumeName, @{label=&amp;ldquo;Size(MB)&amp;rdquo;;Expression={$.Size/1mb -as [int]}}, @{label=&amp;quot;Free(MB)&amp;quot;;Expression={$_.</description>
    </item>
    
    <item>
      <title>Turn Your Stored Procedures Into PowerShell Functions - MetaProgramming With PowerShell</title>
      <link>https://stevenmurawski.com/2009/04/01/turn-your-stored-procedures-into-powershell-functions-metaprogramming-with-powershell/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/04/01/turn-your-stored-procedures-into-powershell-functions-metaprogramming-with-powershell/</guid>
      <description>UPDATE: The script was moved to Google Code. The links in the post have been updated to reflect that. Or you can just go here&amp;hellip; http://code.google.com/p/poshcodegen/ I’ve been working on some data conversion at work, converting records from one system to a new system. I’ve built quite a library of SQL queries with PowerShell wrappers for dealing with data in the first system, but I don’t have the same luxury with the new system.</description>
    </item>
    
    <item>
      <title>Coming To A WSUS Server Near You –&gt; PowerShell V1.0</title>
      <link>https://stevenmurawski.com/2009/03/01/coming-to-a-wsus-server-near-you-powershell-v10/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/coming-to-a-wsus-server-near-you-powershell-v10/</guid>
      <description>Richard Siddaway has just posted that PowerShell 1.0 is available as an optional update.
I just checked my WSUS Server and there it is!!! Deployment is now a snap.
More details in his blog post.. or in the MS Knowledge Base.</description>
    </item>
    
    <item>
      <title>Effective PowerShell E-Book (Free)</title>
      <link>https://stevenmurawski.com/2009/03/01/effective-powershell-e-book-free/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/effective-powershell-e-book-free/</guid>
      <description>Keith Hill has just released his Effective PowerShell blog series as a free e-book.
He did note that this will be an ongoing project and he expects to keep updating it.&amp;#160; Get it now and keep watching for updates!</description>
    </item>
    
    <item>
      <title>Exploring the .NET Framework with PowerShell – Constructors (Part 3)</title>
      <link>https://stevenmurawski.com/2009/03/01/exploring-the-net-framework-with-powershell-constructors-part-3/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/exploring-the-net-framework-with-powershell-constructors-part-3/</guid>
      <description>In part 2(a &amp;amp; b) of this series, we talked about methods and looked at ways to view their overloads, or ways to call them.&amp;#160; We also looked at the objects returned from a method call.&amp;#160; In this post, we are going to explore a special kind of method called the constructor.
A constructor is a method whose job is to create the object that you want to work with.&amp;#160; When I created the Ping object</description>
    </item>
    
    <item>
      <title>Exploring the .NET Framework with PowerShell – Static Members (Part 4)</title>
      <link>https://stevenmurawski.com/2009/03/01/exploring-the-net-framework-with-powershell-static-members-part-4/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/exploring-the-net-framework-with-powershell-static-members-part-4/</guid>
      <description>In our Exploring the .NET Framework series, we’ve covered some terminology, creating instances of objects and calling methods. In today’s installment, we are going to look at using static members - methods and properties. Static methods are methods that a class (or type) make available without needing to create an instance of the class. Similarly, static properties are properties that you can access without needing an instance of the class.</description>
    </item>
    
    <item>
      <title>How To Send E-Mail From PowerShell</title>
      <link>https://stevenmurawski.com/2009/03/01/how-to-send-e-mail-from-powershell/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/how-to-send-e-mail-from-powershell/</guid>
      <description>In my Exploring the .NET Framework series, I introduced the System.Net.Mail.MailMessage class. Being able to create a MailMessage object is all well and good, but if you can’t send it, it’s really not helpful.
Updated - This mainly applies to V1 of PowerShell. V2 has a built in cmdlet for this purpose. To send an email from PowerShell using the .NET Framework, you can use the System.Net.Mail.SMTPClient class.
First, you need to create your MailMessage</description>
    </item>
    
    <item>
      <title>Tip: Free Up Some Memory</title>
      <link>https://stevenmurawski.com/2009/03/01/tip-free-up-some-memory/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/tip-free-up-some-memory/</guid>
      <description>I’m often running too many applications on my workstation, and at least one session of&amp;#160; PowerShell is almost always open.&amp;#160; I’m regularly jumping back to a PowerShell prompt to try something out, query something from my database, or complete a task.&amp;#160;
If I don’t clear out the variables that reference objects I’m done with, the amount of memory used by my PowerShell session increases dramatically, which impacts some other applications that I run.</description>
    </item>
    
    <item>
      <title>Tip: Passing Parameters</title>
      <link>https://stevenmurawski.com/2009/03/01/tip-passing-parameters/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/tip-passing-parameters/</guid>
      <description>Jeffery Hicks recently talked about the Param statement in his Prof. Powershell column for MCP Magazine (Keeping Your Options Open). If you are new to PowerShell, I would definitely recommend reading the article, as provides a nice introduction to the Param statement. Jeffrey recommended to cast your parameter as the type of object that you are expecting, as way to catch errors. I wholeheartedly agree. That can cause trouble though, if you want to allow consumers of your script to pass in one or more values for that parameter.</description>
    </item>
    
    <item>
      <title>Tip: Passing Parameters Revisited</title>
      <link>https://stevenmurawski.com/2009/03/01/tip-passing-parameters-revisited/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/tip-passing-parameters-revisited/</guid>
      <description>In this post. Jeff describes how you can make a function act more like a cmdlet. The problem that you run into in V1 of PoweShell is that it is easy to make your functions work with the pipeline
Function Check-Service { Param([string]$service=”spooler” ) PROCESS { $wmi=get-wmiobject win32_service -filter “name=’$service’” -computername $_ if ($wmi.state -eq “running”) { write $True } else { write $False } } } Get-Content servers.txt | Check-Service</description>
    </item>
    
    <item>
      <title>Tip: Sneaky Storage – What’s in your AppDomain?</title>
      <link>https://stevenmurawski.com/2009/03/01/tip-sneaky-storage-whats-in-your-appdomain/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/tip-sneaky-storage-whats-in-your-appdomain/</guid>
      <description>Since PowerShell is built on .NET, there is a AppDomain (I’ll go into more detail in a later post) which has a lot of information about the .NET environment (what assemblies are loaded, etc..).
One feature that the AppDomain has is to store globally accessible name/value pairs.&amp;#160; Normally, variables in PowerShell should handle most of your “in-process” storage needs, but for the times that they don’t, you have your AppDomain.</description>
    </item>
    
    <item>
      <title>“Diff”ing Database Table Columns</title>
      <link>https://stevenmurawski.com/2009/03/01/diffing-database-table-columns/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/03/01/diffing-database-table-columns/</guid>
      <description>Previously, I published a script on comparing what tables two databases contained.&amp;#160; Going a bit further, I put together a script that compares the columns and what type of data they store.
Compare-DatabaseColumns has similar parameters to the Compare-DatabaseSchema script.
 Table – One or more tables to compare columns from SqlServerOne – SQL Server for the first database FirstDatabase – Name of the first database for the comparison SqlUsernameOne – SQL user name for the first database SqlPasswordOne – SQL password for the first database SqlServerTwo – SQL Server for the second database SecondDatabase – Name of the second database for comparison SqlUsernameTwo – SQL user name for the second database SqlPasswordTwo – SQL password for the second database FilePrefix – Prefix for the log file name Log – Switch parameter that saves one CSV file with the difference in the tables.</description>
    </item>
    
    <item>
      <title>Adding Custom Properties to Functions</title>
      <link>https://stevenmurawski.com/2009/02/01/adding-custom-properties-to-functions/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/adding-custom-properties-to-functions/</guid>
      <description>A question was asked on StackOverflow regarding how to add properties to a function, and then be able to retain that custom property when recalling that function from the function Provider.&amp;#160;&amp;#160; I’m not going to copy my answer here, but I do want to throw out a possible work around for this issue.&amp;#160;
(It has been bugging me and I can’t really concentrate on my other tasks, so I need to get this out of the way.</description>
    </item>
    
    <item>
      <title>Comparing Database Schemas</title>
      <link>https://stevenmurawski.com/2009/02/01/comparing-database-schemas/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/comparing-database-schemas/</guid>
      <description>I regularly am working with several versions of a database for an application that I manage (a live database, training database, test database, and previous version database).&amp;#160; Occasionally, I need to know what the differences between the databases are, especially after our vendor updates my test environment or right after an update in my training or live environment.&amp;#160;
Since I spend a good portion of my day in PowerShell, I wrapped some system table queries in a PowerShell script and use Compare-Object to find any differences in the tables and compare the column definitions as well.</description>
    </item>
    
    <item>
      <title>ConvertTo-Function</title>
      <link>https://stevenmurawski.com/2009/02/01/convertto-function/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/convertto-function/</guid>
      <description>EDIT : I have a bunch of scripts that I use regularly, but it can be a pain to type the path. These are scripts I don&amp;rsquo;t always need, so I don&amp;rsquo;t want to include them in my profile.
I thought it might be convenient to have a way to convert those scripts into functions on demand. I searched around but couldn’t find an existing script to do that, so here one is.</description>
    </item>
    
    <item>
      <title>Exploring the .NET Framework With PowerShell – Terminology (Part 1)</title>
      <link>https://stevenmurawski.com/2009/02/01/exploring-the-net-framework-with-powershell-terminology-part-1/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/exploring-the-net-framework-with-powershell-terminology-part-1/</guid>
      <description>PowerShell opens up the .NET Framework for a large new group of consumers, IT Pro’s (or systems administrators). Microsoft developers have been working for years with the .NET Framework and now that rich sea of resources is available from our command line. One of the first hurdles that many IT Pro’s come across when trying to see where the .NET Framework fits into their workflow is the terminology. Before we start digging into the guts of the .</description>
    </item>
    
    <item>
      <title>Exploring the .NET Framework with PowerShell – Calling a Method (Part 2a)</title>
      <link>https://stevenmurawski.com/2009/02/01/exploring-the-net-framework-with-powershell-calling-a-method-part-2a/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/exploring-the-net-framework-with-powershell-calling-a-method-part-2a/</guid>
      <description>Last week, I defined a number of terms that we’ll be exposed to as we delve into how and why PowerShell is an object oriented shell and how to use it to explore .NET Framework which it is built upon. Now, let’s take a look at how some of these terms surface themselves in PowerShell.
One of the most common tasks you might encounter is needing to ping a computer. There is ping.</description>
    </item>
    
    <item>
      <title>Exploring the .NET Framework with PowerShell – Calling a Method (Part 2b)</title>
      <link>https://stevenmurawski.com/2009/02/01/exploring-the-net-framework-with-powershell-calling-a-method-part-2b/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/exploring-the-net-framework-with-powershell-calling-a-method-part-2b/</guid>
      <description>Continuing from where I left off last week, we were created an instance of the System.Net.NetworkInformation.Ping class and looked at the different ways (overloads) that we can call the Send method.&amp;#160; Now that we’ve seen how we can create Ping objects, let’s take advantage of options for creating some custom ping packets and examine the return object.
PS C:&amp;amp;gt; $encoder = new-object System.Text.ASCIIEncoding
PS C:&amp;amp;gt; $bytes = $encoder.Getbytes(&amp;lsquo;Hello From Steve&amp;rsquo;)</description>
    </item>
    
    <item>
      <title>Finding the K Most Common Words in a File</title>
      <link>https://stevenmurawski.com/2009/02/01/finding-the-k-most-common-words-in-a-file/</link>
      <pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/02/01/finding-the-k-most-common-words-in-a-file/</guid>
      <description>Doug Finke recently posted a blog post about finding the most common words in a file.
Doug put together a little 19 line PowerShell script to solve the issue, but something just called to me about how it wasn’t necessarily playing to some of the included cmdlets in PowerShell.
So, here’s my interpretation as a one liner:
get-content big.txt | foreach-object {[regex]::split($.ToLower(), &amp;lsquo;\W+&amp;lsquo;)} | where-object {$.length -gt 0} | group-object | sort-object -property count -descending | select-object -property name -first 6</description>
    </item>
    
    <item>
      <title>Dealing with WMI Timeouts</title>
      <link>https://stevenmurawski.com/2009/01/01/dealing-with-wmi-timeouts/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2009/01/01/dealing-with-wmi-timeouts/</guid>
      <description>There was a question in the PowerShellCommunity.Org forums about WMI timeouts.
I did some digging and found there are several different types of timeouts that can affect your WMI queries.&amp;#160; I’m still working through different scenarios and I’d appreciate any feedback.
The first type of timeout can occur if the machine that you are targeting does not respond to network traffic (it’s down, you have the wrong IP address, firewalled, etc.</description>
    </item>
    
  </channel>
</rss>