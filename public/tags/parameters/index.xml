<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parameters on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</title>
    <link>https://stevenmurawski.com/tags/parameters/</link>
    <description>Recent content in Parameters on A Sysadmin, An SRE, and a DevOps Walk Into a Bar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 May 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://stevenmurawski.com/tags/parameters/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Back to Basics - Variable Names</title>
      <link>https://stevenmurawski.com/2011/05/01/back-to-basics-variable-names/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/back-to-basics-variable-names/</guid>
      <description>$x and $z and $foo just aren&amp;rsquo;t going to cut it in your production scripts.&amp;#160;
Andy Schneider tweeted during the Scripting Games that there was no penalty for providing a descriptive variable name.&amp;#160; He was right and not quite right enough.&amp;#160; Twitter does not provide you the opportunity to share more than a sound bite in one tweet, so he really could not have commented much further there, but he did in a post that expanded on what judges were looking for in style for the Scripting Games.</description>
    </item>
    
    <item>
      <title>Parameter Validation</title>
      <link>https://stevenmurawski.com/2011/05/01/parameter-validation/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/parameter-validation/</guid>
      <description>Glenn Sizemore wrote a great Scripting Games wrap up post about some of the parameter validation options that are available.&amp;#160; Go read it, I&amp;rsquo;ll wait.
The Smackdown - Ensuring You Have A Value Very often you need to make sure that a parameter will not have a null value.&amp;#160; There are a couple of options in making sure you have valid content.
ValidateNotNull vs. ValidateNotNullOrEmpty When you start to look at some of the validation parameters (in about_Advanced_Functions), the two that leap out are the ValidateNotNull and ValidateNotNullOrEmpty.</description>
    </item>
    
    <item>
      <title>Working the Pipeline</title>
      <link>https://stevenmurawski.com/2011/05/01/working-the-pipeline/</link>
      <pubDate>Sun, 01 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/05/01/working-the-pipeline/</guid>
      <description>The pipeline is a central concept in PowerShell.&amp;#160; It enables you to chain the output from one command to the input of the next, making automation much smoother.&amp;#160; Making your scripts and functions play nicely with the pipeline can mean really impact the ease of use and adaptability of your functions.
Finding the Value In scripts and advanced functions, declaring a parameter whose value can come from the pipeline is pretty straightforward.</description>
    </item>
    
    <item>
      <title>Back to Basics–Parameters</title>
      <link>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/back-to-basicsparameters/</guid>
      <description>My previous posts about the Scripting Games had many references to how parameters were used in scripts and functions.&amp;#160; Since those posts, I’ve had several requests to expand on that, so here we go…
In the Beginning… In PowerShell V1, when we wrote scripts or functions, we had two main ways to retrieve parameters.
The Dark Ages First off, we could parse $Args.
function Do-Something () { $FirstArgument = $args[0] $SecondArgument = $args[1]</description>
    </item>
    
    <item>
      <title>Clean Up Your Parameters</title>
      <link>https://stevenmurawski.com/2011/04/01/clean-up-your-parameters/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/clean-up-your-parameters/</guid>
      <description>Another tidbit to come from the scripts I&amp;rsquo;ve been reviewing is how messy commands with tons of parameters can be.&amp;#160; You end up with really long lines, uneven lines, and/or lots of backticks.
But What Can We Do? But there are commands that require many parameters or long parameters.&amp;#160; We can only stuff so much in variables, and if we name them clearly, they tend to be longer too.&amp;#160; So how can we deal with this?</description>
    </item>
    
    <item>
      <title>The Myth of Advanced Functions–CmdletBinding for the Rest of our Scripts</title>
      <link>https://stevenmurawski.com/2011/04/01/the-myth-of-advanced-functionscmdletbinding-for-the-rest-of-our-scripts/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/the-myth-of-advanced-functionscmdletbinding-for-the-rest-of-our-scripts/</guid>
      <description>It’s been killing me to see scripts that are written like V1 functions and having these wonderfully written V2 style advanced functions contained inside of them.
I would like to share a secret about the CmdletBinding, Parameter attribution, and the rest of the capabilities of Advanced Functions.
These features are not just for Functions!
Those Things That Keep Us Apart, Bring Us Together There are a couple of key differences between functions and scripts.</description>
    </item>
    
    <item>
      <title>Using Pipeline Input</title>
      <link>https://stevenmurawski.com/2011/04/01/using-pipeline-input/</link>
      <pubDate>Fri, 01 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://stevenmurawski.com/2011/04/01/using-pipeline-input/</guid>
      <description>In judging the Scripting Games, I&amp;rsquo;ve found a good number of scripts that are trying to use the Parameter attribute to take pipeline input, but there are several key mistakes.
Why Doesn&amp;rsquo;t This Work? The Problem When you specify a parameter as taking a value from the pipeline, that parameter name is the variable name that you refer to below.&amp;#160;
function Write-SampleData (){ param( [Parameter(ValueFromPipeline=$true,Position=0)] [string] $SampleData )
Write-Host $SampleData  } &amp;lsquo;TestData&amp;rsquo;, &amp;lsquo;TestData2&amp;rsquo;, &amp;lsquo;TestData3&amp;rsquo; | Write-SampleData</description>
    </item>
    
  </channel>
</rss>